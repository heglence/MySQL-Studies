#1)SQL-Structured Query Language-Yapılandırılmış Sorgu Dili

#2)Bir yazılımın olmazsa olmaz 3 saçayağı vardır.
-User Interface-UI-kullanıcı arayüzü yani mesela facebook login ekranı.
-Database-veritabanı
-API-getir götür işlerini yapar.ui ve database arası bağlantıyı sağlar.

#3)API:Application Programming Interface-Uygulama Programlama Arayüzü
Bir yazılımın başka bir yazılımda tanımlanmış işlevlerini kullanabilmesi için
oluşturulmuş bir arayüzdür.

#4)Database nedir: Veritabanı-verilerin depolandığı yer.
Verilerin saklandığı her yer  database'dir. beyin,defter vs.
Elektronik olarak bir bilgisayar sisteminde depolanan yapılandırılmış
bilgi veya veriden oluşan düzenli bir koleksiyondur.

#5)Database'in Faydaları Nelerdir:
	1)Yüksek miktarda bilgi depolanabilir.
	2)Oluşturma, Okuma, Değiştirme ve Silme 	Kolaylığı
  	 Create,    Read, Update        ,Delete     	(CRUD)
	3)Girişin kolay  ve kontrollü olması
	4)Veriye ulaşım kolaylığı
	5)Güvenlik

#6)Database Management System (DBMS)-Veritabanı Yönetim Sistemi
-Database'e erişimi düzenler.
-CRUD işlemlerini düzenler.
-Data güvenliği sağlar.
-Formlar oluşturur ve işletir.
-Sorguar oluşturur ve işletir.
-Raporlar oluşturur ve işletir.
-Uygulamayı kontrol eder.
-Diğer uygulamalarla (Application) iletişimi sağlar.
#7)Relational Databes (İlişkili Tablo)(SQL)
tabloları anlamlı kategorilere bölüp, tablolar arası bağ kurarız.
Her tablo kendi içinde başka tablolarla bağ kurarak oluşturulur.
Relational Databases , SQL Databases (Structured Query Language) olarak da adlandırılır.

#8)SQL tablolar dataları ilişkili tablolarda depolar.
-Tablolar arası ilişkiler net olmalıdır.
Tablolar arası geçiş kolay olmalıdır.
Tabloların ve ilişkilerin bütününe SCHEMA denir.

#9)NoSQL(Non-Relational Databases) veritabanı verilerle çalışırken Yapılandırılmamış 
sorgu dili kullanır.

#10)SQL KOMUTLARI
4 ana gruba ayrılır.
.1)Veri Sorgulama Dili (DQL)
SELECT: Veritabanındaki verileri alır.

.2)Veri Kullanma Dili (DML) (Tablo içindeki verileri)
INSERT:Veritabanına yeni veri ekler.
UPDATE:Veritabanındaki verileri günceller.
DELETE:Veritabanındaki verileri siler.

.3)Veri Tanımlama Dili (DDL) (Tabloları)
CREATE:Veritabanı veya veritabanı içinde tablo oluşturur.
ALTER: Veritabanı veya veritabanı içinde tabloyu günceller.
DROP: Veritabanı veya veritabanı içinde tabloyu siler.

.4) Veri Kontrol Dili (DCL)
GRANT:Bir kullanıcıya yetki vermek için.
REVOKE:Bir kullanıcıya verilen yetkiyi geri almak için kullanılır.

#11)PRIMARY KEY (birincil anahtar):
- bir veri tablosunda yer alan her record
için bir vekil/tanımlayıcı (identify görevi görür, kısıtlamadır (constraint) ve eşsizdir (unique).
-çoğunlukla tek bir alan olsa da birden fazla alanın birleşimiyle de oluşturulabilir.
-en önemli 2 özellik:
  .asla NULL değer alamaz.asla boş bırakamayız.
  .unique-benzersiz olmak zorundadır.
-her tabloda primary key olmak zorunlu değildir. Ama ilişkili veritabanlarında mutlaka en az bir birincil anahtar olmalıdır.
 aralarında foreign key ile bağlantı kurabilirler,  örneğin 3 farklı tablo varsa bu 3 ünün toplamında en az 1 tane primary key olmalı, aralarındaki bağlantıyı zaten bu primary key ile bağlayabiliriz.
-bir tabloda sadece 1 tane primary key olabilir.
-her primary key unique-benzersizdir, ancak her Unique primary key değil.
-primary key her türlü datayı içerebilir. sayi, string vs.
- primary key gerçek dış dünyada bir şeyi temsil ediyorsa Natural Key,
 tabloda kayıt için verilen ürün sıra numarası gibi bir değer ise Surrogate Key denir.
-primary key'in tek başına var olması hiçbir anlam ifade etmez.
#12)FOREİGN KEY 
-primary key'i primary key yapan foreign key'dir.
-2 tablo arasında relation-ilişki oluşturmak için kullanılır.
-Foreign key başka bir tablodaki Primary Key ile ilişkilendirilmiş olmalıdır.
-en önemli 2 özellik
  .Foreign Key NULL değer alabilir.
  .Foreign Key olarak tanımlanan field'da tekrarlar olabilir. Yani unique olması şart değil, duplicate-kopyalara izin verebilir.
-Bir tabloda birden fazla Foreign Key olabilir.
-Değerleri farklı bir tablodaki Primary Key ile eşleşen bir sütun veya sütunların birleşimidir.
#13)COMPOSITE KEY
-Birden fazla field'ın kombinasyonu ile oluşturulur.
-Bir field tek başına primary key özelliği taşımıyorsa oluşturulabilir.
-örnek üni no.12-01-06-0098

#14)UNIQUE KEY (benzersiz)
-Bir tabloda birden fazla olabilir.(bir field'da değil ,tabloda birden fazla unique field olabilir.
- Field içinde birden fazla  NULL değer alabilir. Ancak data tipi String ise ‘ ‘ hiçlik değerini sadece 1 kez alabilir.
-Duplication-çift kullanım'a izin vermez.

#15)ONE TO ONE RELATION (Bire bir ilişki)
-1 adet tablo büyüyünce ikiye bölüp, ilkindeki primary key ikinci tabloda foreign key olmuştur.
-(kendi yorumum.iki tabloda da tek field primary key ortaktır. bir record sadece diğer tablodaki bir record ile eşleşir.

ONE TO MANY RELATİON (Birden çoğa ilişki)
-Bir record diğer tabloda birden fazla recordla ilişki kurar

MANY TO MANY RELATION (2 taraftan da birden fazla yere erişim). 


#16)SELECT * FROM:
SELECT * FROM öğrenciler;   -- bu komut çalışınca oluşturulan tabloyu gösterir. * all anlamı taşır.

 INSERT INTO - VERİ GİRİŞİ:
INSERT INTO + tablo adi + VALUES + (std_id CHAR(4),std_name VARCHAR(25),std_age int)
INSERT INTO fen_lisesi VALUES (101,’Mehmet Dag’, 4.5, ‘Ankara’, ‘2023-01-20’);

Çoklu ise 
INSERT INTO fen_lisesi VALUES
 (101,’Mehmet Dag’, 4.5, ‘Ankara’, ‘2023-01-20’),
(102,’Mehmet Tag’, 4.5, ‘Izmir, ‘2023-01-20’);

INSERT INTO fen_lisesi (adres,isim,derece)
-- Degerleri girerken dikkat edilmesi gereken Tabloyu olustururken degerleri atadigimiz veri cinsinden olmasi
-- String ifadeleri tek tirnak icinde yaziyoruz.
-- Date data tipi de String gibi tek tirnak icine yazilir,
-- ayrica MySQL 'in default tarih formati YYYY-MM-DD seklindedir.
-- char string bir deger ama icine sadece sayi mesela okul no girersek tek tirnak icine almasak da oluyor.

#17)UNIQUE,NOT NULL:
-> Bir field'a kaydedilecek verileri UNIQUE yapmak icin   -- <okul_no CHAR(3) UNIQUE,>
 table olustururken field isminin yanina UNIQUE yaziyoruz.
-> Bir field'a kaydedilecek verilerde null olmasin istiyorsak 
table olustururken field isminin yanina NOT NULL yaziyoruz. . -- <isim VARCHAR (25) NOT NULL,>
*********************************************************/

-- UNIQUE olarak belirledigimiz bir field'a istedigimiz kadar NULL deger kaydedebiliriz
-- ancak data tipi String ise hiclik ifadesini sadece 1 kere kaydeder, diger kayitlarda duplicate hatasi verir.

#18))DROP TABLE:  
DROP TABLE  fen_lisesi;  -- tabloyu siler.
#2) Mevcut bir tabloya tüm field’lara değil daha az field’a veri girmek için
	INSERT INTO anadolu_lisesi (okul_no, isim, derece) VALUES (‘1006’,’Mehmet Emre’, ‘4.2’);
	Normalde adres vs field da var ama onları null kaydediyor. Tablo oluştururkenki sıraya koymamız şart değil ama insert yaparken iki parantez içinin sırası aynı olmalı.
#19) SELECT-WHERE-AND
Verileri SELECT komutu ile veritabanindan cekerken filtreleme yapmak icin : 
 
SELECT ile birlikte WHERE komutu kullanilabilir.
-----Syntax----- :
SELECT field1, field2 
FROM tablo_adi 
WHERE kosul;
-- SELECT -- hangi sutunlari(field) getirsin
-- FROM -- hangi tablodan(table) getirsin
-- WHERE -- hangi satirlari(record) getirsin

Q: Sinav notu 70'ten buyuk esit 80'den kucuk esit olan ogrencilerin tum bilgilerini listeleyin.
- 1. YOL 
SELECT *
FROM ogretmen_lisesi
WHERE sinav_notu >= 70 AND sinav_notu<=80;
- 2. YOL
SELECT *
FROM ogretmen_lisesi
WHERE sinav_notu between 70 AND 80;

-- String ifadeleri BETWEEN komutu ile kiyaslamak istedigimizde bize sonucu ASCII-alfabetik degerlerine gore siralayarak gonderir.
String yani char olan isimleri önce kendi otomatik olarak ascii ye gore yani alfabetik olarak siraliyor. Aralık tabloda olmayan bir isim ile verilirse, o isim tabloda olsa nerede olurdu diyip ona göre listeyi getirir. 
Örneğin tabloda Ahmet Gül ve Mesut Yılmaz var. Between Ahmet and Mesut dersek, listede bu sadece isim olan recordlar olmadığından Ahmet’i Ahmet Gül’ün gerisine, Mesut’u da Mesut Yılmaz’in bir gerisine koyar. Bize de sadece listede olan Ahmet Gül’ü getirir.
- field içindeki string değere yanlışlıkla boşluk space dahi koysa onu almaz, cunku onu asil ismin sonrasina koyar.

-String ifadelerde kendi neyi getireceğini bulmak için önce ascii'ye göre sıralama yapar, ama bize dondururken
tablodaki siralama neyse ona gore dondurur(mesela id'ye göre). istediğimiz field'in ascii sirasina göre değil.
-BETWEEN komutu ile belli bir araliktaki kayitlari listelemek istedigimizde;filtrelemeyi verilen araliga gore yapar, yazdirmayi da tablodaki kayit sirasina gore yapar once ascii ye gore isimleri listeler,  listede yoksa isimler olsaydi nerede olurdu  tablodaki sirasina gore siralayiip getirir.

#20)SELECT-BETWEEN :
BETWEEN iki mantiksal ifade ile tanimlayabilecegimiz durumlari tek komutla 
yazabilme imkani verir, yazdigimiz iki sinirda araliga dahildir.
-----Syntax-----
SELECT field1,field2,...
FROM table_name
WHERE field_name 
BETWEEN deger1 AND deger2;

#21)AND (ve) Operatoru kullanimi:
=> And ile belirtilen sartlarin tamami gerceklesiyorsa o kayit listelenir,
Sartlardan bir tanesi bile tutmazsa listelenmez.
SELECT * FROM matematik WHERE sinav1 < 50 AND sinav2 < 50
Bu ornekte hem sinav1 hem de sinav2 field'i 50'den kucuk olan kayitlar listelenecektir.

#22) OR (veya) Operatoru kullanimi:
=> Or ile belirtilen sartlardan en az biri gerceklesiyorsa o kayit listelenir,
sartlardan hicbiri gerceklesmiyorsa o kayit listelenmez.
SELECT * FROM matematik WHERE sinav1 < 50 OR sinav2 < 50
Bu ornekte sinav1 veya sinav2 field'i 50'den kucuk olan kayitlar listelenecektir.

#23)SELECT-IN : 
IN birden fazla mantiksal ifade ile tanimlayabilecegimiz durumlari tek komutla yazabilme
imkani verir. IN icerisine yazacagimiz sartlar ayni field'a ait olmali.
-----Syntax-----
SELECT field1,field2,...
FROM table_name
WHERE field_name IN (deger1,deger2,...);

--Ornek:
Q1:Personel tablosundan Id'si 10001, 10005 ya da 10008 olan 
personel isimlerini listeleyin
-
SELECT isim
FROM personel
WHERE id IN (10001,10005,10008);

#24)SELECT-LIKE :
LIKE keyword sorgulama yaparken belirli patternleri kullanabilmemize olanak saglar.
-----Syntax-----
 SELECT field1,field2,...
 FROM table_name
 WHERE field LIKE pattern
 
 ----------------
 Pattern icin :
 % ---> 0 veya daha fazla karakteri belirtir
 _ ---> Tek bir karakteri temsil eder.


--Ornek:
Q3: Ismi A ile baslayan personeli listeleyiniz
SELECT *
FROM personel
WHERE isim LIKE 'a%';

--Ornek
Q8: Isminde a harfi olmayan personeli listeleyiniz.
SELECT isim
FROM personel
WHERE isim NOT LIKE  '%A%';

--Ornek:2. harfi e olup diger harflerinde y olan
 '_e%' AND isim LIKE '%y%';

--Ornek: 1. harfi a ve 7. harfi a olan 'a_____a%'
--Ornek: 5 haneli olan  '_____'
--Ornek: a harfi olmayan  '%A%'
#24)SELECT-REGEXP_LIKE :
 Daha karmasik pattern ile sorgulama islemi icin REGEXP_LIKE kullanilabilir.
  -- 'c' => case-sensitive demektir
  -- 'i' => case-insensitive demektir ve default case-insensitive aktiftir.
  
-----Syntax-----
 SELECT sutun1,sutun2,...
 FROM tablo_adi
 WHERE REGEXP_LIKE(sutun_adi, 'pattern[]','c'[]);
-- NOT: VEYA islemi icin | karakteri kullanilir.
-- NOT: Baslangici gostermek icin ^ karakteri kullanilir.
-- NOT: Bitisi gostermek icin $ karakteri kullanilir.
-- Ornek : Icerisinde 'ot' veya 'at' bulunan kelimeleri case-sensitive'e dikkat ederek listele
SELECT *
FROM kelimeler
WHERE REGEXP_LIKE(kelime,'ot|at', 'c' );  -- ot ve at'tan sonra yada önce boşluk olmamalı

-- Q1 : Kelimeler Tablosundan 'ho' veya 'hi' ile baslayan kelimeleri case-sensitive'e dikkat etmeksizin listele
SElect kelime
FROM kelimeler
WHERE REGEXP_LIKE (kelime, '^ho|^hi'); -- insensitive dedigi icin 'i' ye gerek duymadık, yazila da bilirdi

-- NOT : [!-~] = Butun karakterleri ifade eder.
--       [a-zA-Z0-9] = Harf ve rakamlari temsil eder.
-- Q3 : h ile baslayip t ile biten 3 harfli kelimeleri (h ile t kucuk harfli olanlari) listeleyiniz
WHERE REGEXP_LIKE (kelime, 'h[!-~]t','c');

-- Q4 : h ile baslayip t ile biten, 2. karakteri rakam olan 3 harfli kelimeleri (h ile t kucuk harfli olanlari) listeleyiniz
WHERE REGEXP_LIKE (kelime, 'h[0-9]t','c');


-- Q5 : h ile baslayip t ile biten 2. karakteri buyuk harf olan 3 harfli  kelimeleri (h ile t kucuk harfli olanlari) listeleyiniz
WHERE REGEXP_LIKE (kelime, 'h[A-Z]t','c');

-- Q6 : 2. harfi O olan 3 harfli kelimeleri (o harfi buyuk olanlari)  ve id'lerini listeleyiniz
WHERE REGEXP_LIKE (kelime, '^[!-~]O[!-~]$','c');  

#25)UPDATE :
Tabloda varolan herhangi bir record'a ait verinin degistirilmesi icin kullanilir.
-----Syntax-----
UPDATE table_name
SET field1=''
WHERE condition;
UPDATE islemlerinin yapilabilmesi icin Ayarlar -> SQL Editor -> "Safe Updates" check box'indaki
tik isaretini kaldirip kaydetmemiz gerekiyor, sonrasinda MySQL'i kapatip tekrar acmaliyiz

-- Q:Id'si 3 olan firmanin ismini 'KRM' olarak guncelleyiniz.
UPDATE firmalar
SET isim= 'KRM'
WHERE id=3;

-- Q:Iletisim ismi Veli Gul olan firmanin id'sini 4, ismini FDS olarak guncelleyiniz.
 *1.Yontem
UPDATE firmalar
SET id=4 
WHERE iletisim_isim= 'Veli Gul';

UPDATE firmalar
SET isim= 'FDS'
WHERE iletisim_isim= 'Veli Gul';
 *2.Yontem
UPDATE firmalar
SET id=4, isim='FDS'
WHERE iletisim_isim= 'Veli Gul';

-- Q:Ismi ACB olan firmanin iletisim ismini 'Osman Can' olarak guncelleyiniz.
UPDATE firmalar
SET iletisim_isim ='Osman Can'
WHERE isim='ACB';

-- Q:Iletisim ismi 'Osman Can' olan firmanin iletisim ismini 'Ayse Can' olarak guncelleyiniz.
UPDATE firmalar
SET iletisim_isim ='Ayse Can'
WHERE iletisim_isim ='Osman Can'


--Q Urun tablosundan Ali Can'in aldigi urunun ismini, 
tedarik tablosunda irtibat Merve Temiz olan 
sirketin ismi ile degistirin.
UPDATE urun
SET urun_isim = (SELECT isim
		FROM tedarik
		WHERE irtibat = 'Merve Temiz')
WHERE musteri_isim = 'Ali Can';

--Q Tum cocuklarin veli isimlerini puanlar gtablosundaki ders_adi ile update edin 
UPDATE cocuklar
SET veli_isim = (SELECT ders_adi
			 FROM puanlar
             WHERE cocuklar.id = puanlar.ogrenci_id);

#26)PRIMARY KEY :
1) Primary Key bir record'u tanimlayan bir field veya birden fazla field'in kombinasyonudur. 
2) Primary Key Unique'dir. 
3) Bir tabloda en fazla bir Primary Key olabilir .
4) Primary Key field'inda hic bir data NULL olamaz.
-----Syntax-----
 "id" field'ini "primary key" yapmak icin 2 yol var.
1) Data Type'dan sonra "PRIMARY KEY" yazarak.
 
 CREATE TABLE students_table 
(
 id int PRIMARY KEY,
 name varchar(50) NOT NULL,
 grade int,
 adres varchar(100),
 last_update date 
);
2) CONSTRAINT Keyword Kullanilarak Primary Key Tanimlanabilir; 
"CONSTRAINT constraintName PRIMARY KEY(column1, column2, ... column_n)" 
CREATE TABLE students 
(
id int,
name varchar(50) NOT NULL,
grade int,
address varchar(100),
last_modification date, 
CONSTRAINT id_pk PRIMARY KEY (id) 
);

--Q"universite_ogrenci_bilgi_sistemi" isimli bir Table olusturun. 
Tabloda "giris yili", "giris siralamasi", "isim", "bolum" field'lari olsun. 
isim field'i null deger kabul etmesin. 
2.Yontemi kullanarak "giris yili ve giris siralamasi" field'lerinin birlesimini
 "primary key" yapin 
CREATE TABLE universite_ogrenci_bilgi_sistemi
(
giris_yili INT ,
giris_siralamasi INT,
isim VARCHAR (10) NOT NULL,
bolum char(10),
CONSTRAINT giris_yili_siralamasi_pk PRIMARY KEY (giris_yili,giris_siralamasi)
);

#27)FOREIGN KEY :
=> Foreign Key iki tablo arasinda Relation olusturmak icin kullanilir. 
=> Foreign Key baska bir tablonun Primary Key'ine baglidir. 
=> Referenced table (baglanilan tablo, Primary Key'in oldugu Tablo) parent table olarak adlandirilir. 
   Foreign Key'in oldugu tablo ise child table olarak adlandirilir. 
=> Bir Tabloda birden fazla Foreign Key olabilir. 
=> Foreign Key NULL degeri alabilir. 
=> Foreign Key duplicate olabilir. 
Note 1: "Parent Table"da olmayan bir id'ye sahip datayi "Child Table"'a ekleyemezsiniz .
Note 2: Child Table'i silmeden Parent Table'i silemezsiniz. Once "Child Table" silinir, sonra "Parent Table" silinir.
        
-----Syntax-----
CONSTRAINT constraintName FOREIGN KEY(table_name_id) 
REFERENCES parent_table (parent_table_field_name) 

CREATE TABLE table_name
(
id char(10),
name char(10),
CONSTRAINT constraint_name 
FOREIGN KEY (table_name_id) 
REFERENCES parent_table (parent_table_field_name) 
);
-- Q:
"bebeler" isimli bir tablo olusturun. 
Tabloda "id", "isim", "iletisim" field'lari olsun 
ve "id" yi Primary Key yapin.
 "notlar" isminde baska bir tablo olusturun "bebe_id" ve "puan"
 field'lari olsun ve "bebe_id" yi Foreign Key yapin.

CREATE TABLE bebeler
(
id INT,
isim VARCHAR(20),
iletisim VARCHAR(20),
CONSTRAINT bebeler_pk PRIMARY KEY (id)
);

CREATE TABLE notlar
(
bebe_id INT,
puan INT,
CONSTRAINT notlar_fk FOREIGN KEY (bebe_id)
REFERENCES bebeler(id)
);
#28)DELETE:
DELETE FROM table_name komutu tablodaki tum recordlari siler.
Eger tum kayitlar silindikten sonra tabloyu gormek isterseniz size sadece bos bir tablo gosterir.
DELETE komutu sadece datalari siler, tabloyu silmez.
-- DELETE FROM tablo_adi;  Tablonun tum icerigini siler.
-- Bu komut bir DML komutudur. Dolayisiyla devaminda WHERE gibi cumlecikler
-- kullanilabilir.
    
    -- DELETE FROM tablo_adi
    -- WHERE field = veri;
    
--    DELETE FROM ogrenciler;     -- Tum verileri sil.
--    SAVEPOINT ABC;     -- Verilen konuma kodlari kaydeder. (database'deki tüm tabloları kaydediyor, tum database yedegini alıyor.)
--    ROLLBACK TO  ABC;  -- Silinen Verileri geri getir.
-- Bilgileri geri getirirken sikinti yasamamak icin ayarlar sql execution auto commit tiki kaldir
--Q -- Veli Ismi Ali ya da Ayse olan kaydi siliniz
 DELETE FROM cucuklar
 WHERE veli_isim = 'ali' OR veli_isim ='Ayse';
2. yol
 DELETE FROM cucuklar
 WHERE veli_isim IN ('Ali', 'Ayse');

#29)DELETE - TRUNCATE - DROP   
  => TRUNCATE TABLE komutu tablodaki tum datalari kalici olarak siler
  => Truncate ve Delete komutlarinin ikisi de bir tabloda bulunan recordlari silmek icin kullanilir.
  => Iki komut da sadece belirtilen tablodaki kayitlari siler.
  => En belirgin farki ise Delete komutu ile belirli bir araligi silebilirken,
  => Truncate komutu tablodaki tum verileri siler.
  
 .1 -) TRUNCATE komutu DELETE komutu gibi bir tablodaki verilerin tamamini siler.
    Ancak, secmeli silme yapamaz. Cunku Truncate komutu DML degil DDL komutudur.*/ 
   
       TRUNCATE TABLE cocuklar; -- dogru yazim , ancak onca bir alttaki child ı olan puanlar table i silmeliyiz.
       DROP TABLE puanlar;  -- bunu da truncate ile de silebilirdik.
.2-) DELETE komutu beraberinde WHERE cumlecigi kullanilabilir. TRUNCATE ile 
    kullanilmaz.
3-) Delete komutu ile silinen veriler ROLLBACK Komutu ile kolaylikla geri 
    alinabilir.
    4-) Truncate ile silinen veriler geri alinmasi daha zordur. Ancak
    Transaction yontemi ile geri alinmasi mumkun olabilir.
    
    5-) DROP komutu da bir DDL komutudur. Ancak DROP veriler ile birlikte tabloyu da 
    siler. 
    
    -- Tablodaki kayitlari silmek ile tabloyu silmek farkli islemlerdir.
    -- Silme komutlari da iki basamaklidir, biz genelde geri getirilebilecek sekilde sileriz. 
    -- Ancak bazen guvenlik gibi sebeplerle geri getirilmeyecek sekilde silinmesi istenebilir.

#30)SUBQUERY
    Sorgu icinde calisan sorguya SUBQUERY (ALT SORGU) denir.
--Q Personel sayisi 15.000'den cok olan sirketlerin isimlerini
 ve bu sirkette calisan personelin isimlerini listeleyin
SELECT isim, sirket -- bu satirda hangi veli yilmaz gorelim diye sirket ismini ekledik, soruda yoktu.
FROM calisanlar
WHERE sirket IN (SELECT sirket
		   FROM sirketler
                     	   WHERE calisanlar_sayisi>'15000');

#31)SELECT ile SUBQUERY
  SELECT ile SUBQUERY kullanimi :
-- SELECT -- hangi sutunlari(field) getirsin
-- FROM -- hangi tablodan(table) getirsin
-- WHERE -- hangi satirlari(record) getirsin

 * Yazdigimiz QUERY'lerde SELECT satirinda field isimleri kullaniyoruz.
  Dolayisiyla eger SELECT satirinda bir SUBQUERY yazacaksak sonucun
  tek bir field donmesi gerekir.

  * SELECT satirinda SUBQUERY yazacaksak SUM, COUNT, MIN, MAX ve AVG gibi 
  fonksiyonlar kullanilir. Bu fonksiyonlara AGGREGATE FUNCTION denir.
=> Interview Question : Subquery'i Select satirinda kullanirsaniz ne ile 
kullanmaniz gerekir?
SORU 1- Her sirketin ismini, personel sayisini ve personelin ortalama maasini listeleyen bir QUERY yazin.
SELECT sirket,calisanlar_sayisi,(SELECT AVG(maas) 
				FROM calisanlar
WHERE calisanlar.sirket=sirketler.sirket) AS ort_maas -- as yeni field'a isim veriyor
FROM sirketler;

SORU 2- Her sirketin ismini ve personelin aldigi max. Maasi listeleyen bir QUERY yazin.
SELECT sirket,(SELECT MAX(maas) 
		FROM calisanlar
		WHERE calisanlar.sirket=sirketler.sirket) AS max_maas
FROM sirketler;

SORU 3- Her sirketin id'sini, ismini ve toplam kac sehirde bulundugunu listeleyen bir QUERY yaziniz.
SELECT sirket_id,sirket,(SELECT COUNT(sehir) 
			FROM calisanlar
			WHERE calisanlar.sirket=sirketler.sirket) AS sum_sehir
FROM sirketler;

SORU 4- ID'si 101'den buyuk olan sirketlerin id'sini, ismini ve toplam kac sehirde bulundugunu listeleyen bir QUERY yaziniz.
SELECT sirket_id, sirket,(SELECT COUNT(sehir) 
			FROM calisanlar
			WHERE calisanlar.sirket=sirketler.sirket) AS sum_sehir
FROM sirketler
WHERE sirket_id>101;

SORU 5- Her sirketin ismini,personel sayisini ve personelin aldigi max. ve min. maasi listeleyen bir QUERY yazin.
SELECT sirket,calisanlar_sayisi,(SELECT MAX(maas) 
				FROM calisanlar
				WHERE calisanlar.sirket=sirketler.sirket) AS max_maas,
             			             (SELECT MIN(maas) 
				FROM calisanlar
				WHERE calisanlar.sirket=sirketler.sirket) AS min_maas
FROM sirketler;

SORU 6- Her sirketin ismini ve personel sayisini ve isçilere odedigi toplam maasi listeleyen bir QUERY yazin.
SELECT sirket, calisanlar_sayisi,(SELECT SUM(maas) 
				FROM calisanlar
				WHERE calisanlar.sirket=sirketler.sirket) AS iscilere_odenen_toplam_maas
FROM sirketler;























