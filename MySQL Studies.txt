#1)SQL-Structured Query Language-Yapılandırılmış Sorgu Dili

#2)Bir yazılımın olmazsa olmaz 3 saçayağı vardır.
-User Interface-UI-kullanıcı arayüzü yani mesela facebook login ekranı.
-Database-veritabanı
-API-getir götür işlerini yapar.ui ve database arası bağlantıyı sağlar.

#3)API:Application Programming Interface-Uygulama Programlama Arayüzü
Bir yazılımın başka bir yazılımda tanımlanmış işlevlerini kullanabilmesi için
oluşturulmuş bir arayüzdür.

#4)Database nedir: Veritabanı-verilerin depolandığı yer.
Verilerin saklandığı her yer  database'dir. beyin,defter vs.
Elektronik olarak bir bilgisayar sisteminde depolanan yapılandırılmış
bilgi veya veriden oluşan düzenli bir koleksiyondur.

#5)Database'in Faydaları Nelerdir:
	1)Yüksek miktarda bilgi depolanabilir.
	2)Oluşturma, Okuma, Değiştirme ve Silme 	Kolaylığı
  	 Create,    Read, Update        ,Delete     	(CRUD)
	3)Girişin kolay  ve kontrollü olması
	4)Veriye ulaşım kolaylığı
	5)Güvenlik

#6)Database Management System (DBMS)-Veritabanı Yönetim Sistemi
-Database'e erişimi düzenler.
-CRUD işlemlerini düzenler.
-Data güvenliği sağlar.
-Formlar oluşturur ve işletir.
-Sorguar oluşturur ve işletir.
-Raporlar oluşturur ve işletir.
-Uygulamayı kontrol eder.
-Diğer uygulamalarla (Application) iletişimi sağlar.
#7)Relational Databes (İlişkili Tablo)(SQL)
tabloları anlamlı kategorilere bölüp, tablolar arası bağ kurarız.
Her tablo kendi içinde başka tablolarla bağ kurarak oluşturulur.
Relational Databases , SQL Databases (Structured Query Language) olarak da adlandırılır.

#8)SQL tablolar dataları ilişkili tablolarda depolar.
-Tablolar arası ilişkiler net olmalıdır.
Tablolar arası geçiş kolay olmalıdır.
Tabloların ve ilişkilerin bütününe SCHEMA denir.

#9)NoSQL(Non-Relational Databases) veritabanı verilerle çalışırken Yapılandırılmamış 
sorgu dili kullanır.

#10)SQL KOMUTLARI
4 ana gruba ayrılır.
.1)Veri Sorgulama Dili (DQL)
SELECT: Veritabanındaki verileri alır.

.2)Veri Kullanma Dili (DML) (Tablo içindeki verileri)
INSERT:Veritabanına yeni veri ekler.
UPDATE:Veritabanındaki verileri günceller.
DELETE:Veritabanındaki verileri siler.

.3)Veri Tanımlama Dili (DDL) (Tabloları)
CREATE:Veritabanı veya veritabanı içinde tablo oluşturur.
ALTER: Veritabanı veya veritabanı içinde tabloyu günceller.
DROP: Veritabanı veya veritabanı içinde tabloyu siler.

.4) Veri Kontrol Dili (DCL)
GRANT:Bir kullanıcıya yetki vermek için.
REVOKE:Bir kullanıcıya verilen yetkiyi geri almak için kullanılır.

#11)PRIMARY KEY (birincil anahtar):
- bir veri tablosunda yer alan her record
için bir vekil/tanımlayıcı (identify görevi görür, kısıtlamadır (constraint) ve eşsizdir (unique).
-çoğunlukla tek bir alan olsa da birden fazla alanın birleşimiyle de oluşturulabilir.
-en önemli 2 özellik:
  .asla NULL değer alamaz.asla boş bırakamayız.
  .unique-benzersiz olmak zorundadır.
-her tabloda primary key olmak zorunlu değildir. Ama ilişkili veritabanlarında mutlaka en az bir birincil anahtar olmalıdır.
 aralarında foreign key ile bağlantı kurabilirler,  örneğin 3 farklı tablo varsa bu 3 ünün toplamında en az 1 tane primary key olmalı, aralarındaki bağlantıyı zaten bu primary key ile bağlayabiliriz.
-bir tabloda sadece 1 tane primary key olabilir.
-her primary key unique-benzersizdir, ancak her Unique primary key değil.
-primary key her türlü datayı içerebilir. sayi, string vs.
- primary key gerçek dış dünyada bir şeyi temsil ediyorsa Natural Key,
 tabloda kayıt için verilen ürün sıra numarası gibi bir değer ise Surrogate Key denir.
-primary key'in tek başına var olması hiçbir anlam ifade etmez.
#12)FOREİGN KEY 
-primary key'i primary key yapan foreign key'dir.
-2 tablo arasında relation-ilişki oluşturmak için kullanılır.
-Foreign key başka bir tablodaki Primary Key ile ilişkilendirilmiş olmalıdır.
-en önemli 2 özellik
  .Foreign Key NULL değer alabilir.
  .Foreign Key olarak tanımlanan field'da tekrarlar olabilir. Yani unique olması şart değil, duplicate-kopyalara izin verebilir.
-Bir tabloda birden fazla Foreign Key olabilir.
-Değerleri farklı bir tablodaki Primary Key ile eşleşen bir sütun veya sütunların birleşimidir.
#13)COMPOSITE KEY
-Birden fazla field'ın kombinasyonu ile oluşturulur.
-Bir field tek başına primary key özelliği taşımıyorsa oluşturulabilir.
-örnek üni no.12-01-06-0098

#14)UNIQUE KEY (benzersiz)
-Bir tabloda birden fazla olabilir.(bir field'da değil ,tabloda birden fazla unique field olabilir.
- Field içinde birden fazla  NULL değer alabilir. Ancak data tipi String ise ‘ ‘ hiçlik değerini sadece 1 kez alabilir.
-Duplication-çift kullanım'a izin vermez.

#15)ONE TO ONE RELATION (Bire bir ilişki)
-1 adet tablo büyüyünce ikiye bölüp, ilkindeki primary key ikinci tabloda foreign key olmuştur.
-(kendi yorumum.iki tabloda da tek field primary key ortaktır. bir record sadece diğer tablodaki bir record ile eşleşir.

ONE TO MANY RELATİON (Birden çoğa ilişki)
-Bir record diğer tabloda birden fazla recordla ilişki kurar

MANY TO MANY RELATION (2 taraftan da birden fazla yere erişim). 


#16)SELECT * FROM:
SELECT * FROM öğrenciler;   -- bu komut çalışınca oluşturulan tabloyu gösterir. * all anlamı taşır.

 INSERT INTO - VERİ GİRİŞİ:
INSERT INTO + tablo adi + VALUES + (std_id CHAR(4),std_name VARCHAR(25),std_age int)
INSERT INTO fen_lisesi VALUES (101,’Mehmet Dag’, 4.5, ‘Ankara’, ‘2023-01-20’);

Çoklu ise 
INSERT INTO fen_lisesi VALUES
 (101,’Mehmet Dag’, 4.5, ‘Ankara’, ‘2023-01-20’),
(102,’Mehmet Tag’, 4.5, ‘Izmir, ‘2023-01-20’);

INSERT INTO fen_lisesi (adres,isim,derece)
-- Degerleri girerken dikkat edilmesi gereken Tabloyu olustururken degerleri atadigimiz veri cinsinden olmasi
-- String ifadeleri tek tirnak icinde yaziyoruz.
-- Date data tipi de String gibi tek tirnak icine yazilir,
-- ayrica MySQL 'in default tarih formati YYYY-MM-DD seklindedir.
-- char string bir deger ama icine sadece sayi mesela okul no girersek tek tirnak icine almasak da oluyor

#17)UNIQUE,NOT NULL:
-> Bir field'a kaydedilecek verileri UNIQUE yapmak icin   -- <okul_no CHAR(3) UNIQUE,>
 table olustururken field isminin yanina UNIQUE yaziyoruz.
-> Bir field'a kaydedilecek verilerde null olmasin istiyorsak 
table olustururken field isminin yanina NOT NULL yaziyoruz. . -- <isim VARCHAR (25) NOT NULL,>
*********************************************************/

-- UNIQUE olarak belirledigimiz bir field'a istedigimiz kadar NULL deger kaydedebiliriz
-- ancak data tipi String ise hiclik ifadesini sadece 1 kere kaydeder, diger kayitlarda duplicate hatasi verir.

#18))DROP TABLE:  
DROP TABLE  fen_lisesi;  -- tabloyu siler.
#2) Mevcut bir tabloya tüm field’lara değil daha az field’a veri girmek için
	INSERT INTO anadolu_lisesi (okul_no, isim, derece) VALUES (‘1006’,’Mehmet Emre’, ‘4.2’);
	Normalde adres vs field da var ama onları null kaydediyor. Tablo oluştururkenki sıraya koymamız şart değil ama insert yaparken iki parantez içinin sırası aynı olmalı.
#19) SELECT-WHERE-AND
Verileri SELECT komutu ile veritabanindan cekerken filtreleme yapmak icin : 
 
SELECT ile birlikte WHERE komutu kullanilabilir.
-----Syntax----- :
SELECT field1, field2 
FROM tablo_adi 
WHERE kosul;
-- SELECT -- hangi sutunlari(field) getirsin
-- FROM -- hangi tablodan(table) getirsin
-- WHERE -- hangi satirlari(record) getirsin

Q: Sinav notu 70'ten buyuk esit 80'den kucuk esit olan ogrencilerin tum bilgilerini listeleyin.
- 1. YOL 
SELECT *
FROM ogretmen_lisesi
WHERE sinav_notu >= 70 AND sinav_notu<=80;
- 2. YOL
SELECT *
FROM ogretmen_lisesi
WHERE sinav_notu between 70 AND 80;

-- String ifadeleri BETWEEN komutu ile kiyaslamak istedigimizde bize sonucu ASCII-alfabetik degerlerine gore siralayarak gonderir.
String yani char olan isimleri önce kendi otomatik olarak ascii ye gore yani alfabetik olarak siraliyor. Aralık tabloda olmayan bir isim ile verilirse, o isim tabloda olsa nerede olurdu diyip ona göre listeyi getirir. 
Örneğin tabloda Ahmet Gül ve Mesut Yılmaz var. Between Ahmet and Mesut dersek, listede bu sadece isim olan recordlar olmadığından Ahmet’i Ahmet Gül’ün gerisine, Mesut’u da Mesut Yılmaz’in bir gerisine koyar. Bize de sadece listede olan Ahmet Gül’ü getirir.
- field içindeki string değere yanlışlıkla boşluk space dahi koysa onu almaz, cunku onu asil ismin sonrasina koyar.

-String ifadelerde kendi neyi getireceğini bulmak için önce ascii'ye göre sıralama yapar, ama bize dondururken
tablodaki siralama neyse ona gore dondurur(mesela id'ye göre). istediğimiz field'in ascii sirasina göre değil.
-BETWEEN komutu ile belli bir araliktaki kayitlari listelemek istedigimizde;filtrelemeyi verilen araliga gore yapar, yazdirmayi da tablodaki kayit sirasina gore yapar once ascii ye gore isimleri listeler,  listede yoksa isimler olsaydi nerede olurdu  tablodaki sirasina gore siralayiip getirir.

#20)SELECT-BETWEEN :
BETWEEN iki mantiksal ifade ile tanimlayabilecegimiz durumlari tek komutla 
yazabilme imkani verir, yazdigimiz iki sinirda araliga dahildir.
-----Syntax-----
SELECT field1,field2,...
FROM table_name
WHERE field_name 
BETWEEN deger1 AND deger2;

#21)AND (ve) Operatoru kullanimi:
=> And ile belirtilen sartlarin tamami gerceklesiyorsa o kayit listelenir,
Sartlardan bir tanesi bile tutmazsa listelenmez.
SELECT * FROM matematik WHERE sinav1 < 50 AND sinav2 < 50
Bu ornekte hem sinav1 hem de sinav2 field'i 50'den kucuk olan kayitlar listelenecektir.

#22) OR (veya) Operatoru kullanimi:
=> Or ile belirtilen sartlardan en az biri gerceklesiyorsa o kayit listelenir,
sartlardan hicbiri gerceklesmiyorsa o kayit listelenmez.
SELECT * FROM matematik WHERE sinav1 < 50 OR sinav2 < 50
Bu ornekte sinav1 veya sinav2 field'i 50'den kucuk olan kayitlar listelenecektir.

#23)SELECT-IN :
IN birden fazla mantiksal ifade ile tanimlayabilecegimiz durumlari tek komutla yazabilme
imkani verir. IN icerisine yazacagimiz sartlar ayni field'a ait olmali.
-----Syntax-----
SELECT field1,field2,...
FROM table_name
WHERE field_name IN (deger1,deger2,...);

--Ornek:
Q1:Personel tablosundan Id'si 10001, 10005 ya da 10008 olan 
personel isimlerini listeleyin
-
SELECT isim
FROM personel
WHERE id IN (10001,10005,10008);













